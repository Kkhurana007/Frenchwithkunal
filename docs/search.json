[
  {
    "objectID": "terms.html",
    "href": "terms.html",
    "title": "Terms of Service",
    "section": "",
    "text": "Terms of Service\nBy using French with Kunal’s services, you agree to these Terms:-\n\nOur services include French lessons, materials, and tutoring for personal learning.\nKeep your account secure and notify us of unauthorized access.\nPayments are non-refundable unless stated otherwise, and cancellations require 3 days notice.\nDo not use our services for illegal activities or share content without permission.\nYour data will be managed according to our Privacy Policy.\nWe are not liable for indirect damages, with our liability limited to payments made in the past 3 months.\nWe may terminate access for violations of these Terms.\nWe reserve the right to update these Terms; continued use means acceptance of changes.\nFor questions, contact us at info@frenchwithkunal.ca"
  },
  {
    "objectID": "posts/semainedu27janvier/clothes.html",
    "href": "posts/semainedu27janvier/clothes.html",
    "title": "vêtements/clothes",
    "section": "",
    "text": "In one of my recent lessons, I taught my students how to ask for clothes in French, a practical skill for any language learner. For example, you can say: “Hello, I’m looking for a [sweater/dress/shirt] in size [M, L, etc.]. Do you have this model in [color]?” Or: “Do you have these jeans in another size?”\nThese simple phrases make it easy to navigate a store or shop online in French. I also explained the importance of using polite terms like “please” (s’il vous plaît) and “thank you” (merci). My students loved practicing these expressions, and some even created dialogues to practice!\nWhat about you? Have you ever tried shopping for clothes in French? Share your experiences in the comments!"
  },
  {
    "objectID": "posts/semainedu20janvier/re_verbes.html",
    "href": "posts/semainedu20janvier/re_verbes.html",
    "title": "re_category-present_tense",
    "section": "",
    "text": "In French, -re verbs are another group of regular verbs that follow their own conjugation pattern. To conjugate an -re verb in the present tense, you remove the -re ending from the infinitive, leaving the stem, and then add the following endings: -s, -s, -, -ons, -ez, -ent. For example, with the verb “vendre” (to sell):\nje vends (I sell) tu vends (you sell, informal) il/elle vend (he/she sells) nous vendons (we sell) vous vendez (you sell, formal/plural) ils/elles vendent (they sell)\nMost -re verbs, like attendre (to wait) or perdre (to lose), follow this regular conjugation pattern, making them predictable and relatively easy to conjugate in various tenses. However, similar to other verb categories, there are some irregular -re verbs that don’t follow these rules.\nFor details, you may look at this pdf."
  },
  {
    "objectID": "posts/semainedu20janvier/pronunciation.html",
    "href": "posts/semainedu20janvier/pronunciation.html",
    "title": "Pronunciation",
    "section": "",
    "text": "In French, pronunciation of vowels and consonants can be quite distinct compared to English. The French vowels include sounds like “a” (ah), “e” (uh, as in “le”), “i” (ee), “o” (oh), and “u” (ew, like “une”). Additionally, French has nasal vowels (e.g., “an,” “on,” “un”), where air is directed through the nose. Consonants in French are mostly similar to English, but some have slight differences. For instance, “r” is pronounced with a guttural sound from the back of the throat, while “h” is always silent. The French “c” is soft (like “s”) before “e” or “i” and hard (like “k”) otherwise. For better understanding and practice, you can find an educational resource for pronunciation at this link and by watching this video."
  },
  {
    "objectID": "posts/semainedu20janvier/ir_verbes.html",
    "href": "posts/semainedu20janvier/ir_verbes.html",
    "title": "ir_category-present_tense",
    "section": "",
    "text": "In French, -ir verbs are another category of regular verbs, and they follow a distinct conjugation pattern. To conjugate an -ir verb in the present tense, you remove the -ir ending from the infinitive, leaving the stem, and then add the appropriate endings: -is, -is, -it, -issons, -issez, -issent. For example, with the verb “finir” (to finish):\nje finis (I finish) tu finis (you finish, informal) il/elle finit (he/she finishes) nous finissons (we finish) vous finissez (you finish, formal/plural) ils/elles finissent (they finish)\nMost -ir verbs, like choisir (to choose) or réussir (to succeed), follow this regular conjugation pattern, making them easier to learn compared to irregular verbs.\nYou can look into detalied explanation throught this pdf."
  },
  {
    "objectID": "policy.html",
    "href": "policy.html",
    "title": "Privacy Policy - French with Kunal",
    "section": "",
    "text": "Privacy Policy - French with Kunal\nFrench with Kunal values your privacy. We collect personal information (name, email, etc.) only for registration, communication, and service improvement purposes.\nWe do not share your data without your consent, except for legal obligations or essential third-party services.\nYour data is protected and retained only as long as necessary. You may request access, correction, or deletion of your information.\nFor any questions, contact us at info@frenchwithkunal.ca."
  },
  {
    "objectID": "ethics.html",
    "href": "ethics.html",
    "title": "Code of Ethics",
    "section": "",
    "text": "At French with Kunal, we are dedicated to maintaining the highest ethical standards in our teaching and interactions. Our commitment to integrity, respect, and professionalism shapes every aspect of our work.\n\n\nWe ensure respectful communication with all learners, fostering an environment where trust and honesty are key. We are committed to providing accurate and meaningful language education.\n\n\n\nWe are dedicated to delivering high-quality content that empowers our students to learn French effectively, using proven methodologies and up-to-date resources.\n\n\n\nWe respect the privacy of our students and handle all personal information with the utmost confidentiality, in compliance with data protection laws.\n\n\n\nWe provide an inclusive and welcoming environment for learners of all backgrounds, ensuring that everyone has equal access to learning opportunities.\n\n\n\nWe value transparency in all our interactions. We strive to be clear and honest in our communication, from course descriptions to pricing.\n\n\n\nOur educators and staff maintain a high level of professionalism, adhering to ethical standards in all aspects of our work and providing a positive, supportive learning experience."
  },
  {
    "objectID": "ethics.html#respect-and-integrity",
    "href": "ethics.html#respect-and-integrity",
    "title": "Code of Ethics",
    "section": "",
    "text": "We ensure respectful communication with all learners, fostering an environment where trust and honesty are key. We are committed to providing accurate and meaningful language education."
  },
  {
    "objectID": "ethics.html#quality-education",
    "href": "ethics.html#quality-education",
    "title": "Code of Ethics",
    "section": "",
    "text": "We are dedicated to delivering high-quality content that empowers our students to learn French effectively, using proven methodologies and up-to-date resources."
  },
  {
    "objectID": "ethics.html#confidentiality",
    "href": "ethics.html#confidentiality",
    "title": "Code of Ethics",
    "section": "",
    "text": "We respect the privacy of our students and handle all personal information with the utmost confidentiality, in compliance with data protection laws."
  },
  {
    "objectID": "ethics.html#equal-opportunity",
    "href": "ethics.html#equal-opportunity",
    "title": "Code of Ethics",
    "section": "",
    "text": "We provide an inclusive and welcoming environment for learners of all backgrounds, ensuring that everyone has equal access to learning opportunities."
  },
  {
    "objectID": "ethics.html#transparency",
    "href": "ethics.html#transparency",
    "title": "Code of Ethics",
    "section": "",
    "text": "We value transparency in all our interactions. We strive to be clear and honest in our communication, from course descriptions to pricing."
  },
  {
    "objectID": "ethics.html#professionalism",
    "href": "ethics.html#professionalism",
    "title": "Code of Ethics",
    "section": "",
    "text": "Our educators and staff maintain a high level of professionalism, adhering to ethical standards in all aspects of our work and providing a positive, supportive learning experience."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About us",
    "section": "",
    "text": "Welcome to our website, your go-to destination for learning French in a fun, engaging, and effective way. Whether you’re a complete beginner or looking to polish your skills, we have something for everyone.\n\n\nAt French with Kunal, our mission is to make learning French accessible and enjoyable for all. We believe that language learning should be a delightful journey, not a daunting task. Our goal is to help you achieve fluency and confidence in French through personalized lessons, interactive content, and a supportive community.\n\n\n\nFounded by Kunal, a passionate French learner and teacher with over 5 years of experience, French with Kunal is dedicated to providing high-quality French education. Kunal has a deep love for the French language and culture, and is committed to sharing this passion with students around the world.\n\n\n\n\nPersonalized Lessons: Tailored to your individual needs and goals, our lessons are designed to help you progress at your own pace. \nInteractive Content: From videos and quizzes to live sessions and forums, we offer a variety of resources to keep you engaged and motivated. \nCommunity Support: Join our vibrant community of learners and native speakers to practice, share experiences, and support each other on this language-learning journey.\n\n\n\n\n\nExpertise: With years of teaching experience, Kunal brings a wealth of knowledge and a proven track record of success. \nFlexibility: Learn at your own pace, anytime, anywhere. Our online platform is accessible 24/7, so you can fit learning into your busy schedule. \nPassion: We are passionate about French and committed to helping you achieve your language goals. \n\nJoin us today and start your journey to mastering French with French with Kunal. We can’t wait to help you succeed!"
  },
  {
    "objectID": "about.html#our-mission",
    "href": "about.html#our-mission",
    "title": "About us",
    "section": "",
    "text": "At French with Kunal, our mission is to make learning French accessible and enjoyable for all. We believe that language learning should be a delightful journey, not a daunting task. Our goal is to help you achieve fluency and confidence in French through personalized lessons, interactive content, and a supportive community."
  },
  {
    "objectID": "about.html#who-we-are",
    "href": "about.html#who-we-are",
    "title": "About us",
    "section": "",
    "text": "Founded by Kunal, a passionate French learner and teacher with over 5 years of experience, French with Kunal is dedicated to providing high-quality French education. Kunal has a deep love for the French language and culture, and is committed to sharing this passion with students around the world."
  },
  {
    "objectID": "about.html#what-we-offer",
    "href": "about.html#what-we-offer",
    "title": "About us",
    "section": "",
    "text": "Personalized Lessons: Tailored to your individual needs and goals, our lessons are designed to help you progress at your own pace. \nInteractive Content: From videos and quizzes to live sessions and forums, we offer a variety of resources to keep you engaged and motivated. \nCommunity Support: Join our vibrant community of learners and native speakers to practice, share experiences, and support each other on this language-learning journey."
  },
  {
    "objectID": "about.html#why-choose-us",
    "href": "about.html#why-choose-us",
    "title": "About us",
    "section": "",
    "text": "Expertise: With years of teaching experience, Kunal brings a wealth of knowledge and a proven track record of success. \nFlexibility: Learn at your own pace, anytime, anywhere. Our online platform is accessible 24/7, so you can fit learning into your busy schedule. \nPassion: We are passionate about French and committed to helping you achieve your language goals. \n\nJoin us today and start your journey to mastering French with French with Kunal. We can’t wait to help you succeed!"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Us",
    "section": "",
    "text": "We’d love to hear from you! Whether you have a question about our services, feedback, or need support, our team is here to help.\n\n\nEmail: info@frenchwithkunal.ca\n\n\n\nFill out this form to join our online learning classes."
  },
  {
    "objectID": "contact.html#get-in-touch",
    "href": "contact.html#get-in-touch",
    "title": "Contact Us",
    "section": "",
    "text": "Email: info@frenchwithkunal.ca"
  },
  {
    "objectID": "contact.html#enrollment-form",
    "href": "contact.html#enrollment-form",
    "title": "Contact Us",
    "section": "",
    "text": "Fill out this form to join our online learning classes."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "vêtements/clothes\n\n\n2 min\n\n\n\nA1/A2\n\n\nvêtements\n\n\nclothes\n\n\n\n\nKunal Khurana\n\n\nJan 31, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreetings/salutations\n\n\n2 min\n\n\n\nA1/A2\n\n\ngreetings\n\n\nhousehold items\n\n\n\n\nKunal Khurana\n\n\nJan 31, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ner_category-present_tense\n\n\n2 min\n\n\n\nA1/A2\n\n\ner_verbes\n\n\npresent tense\n\n\n\n\nKunal Khurana\n\n\nJan 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUseful resouces\n\n\n2 min\n\n\n\nA1/A2\n\n\nResouces\n\n\nlearn French\n\n\n\n\nKunal Khurana\n\n\nJan 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumbers\n\n\n2 min\n\n\n\nA1/A2\n\n\nNumbers\n\n\nCounting\n\n\n\n\nKunal Khurana\n\n\nJan 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSujet+aller+verbe\n\n\n1 min\n\n\n\nA1/A2\n\n\nverbs\n\n\nFrench\n\n\n\n\nKunal Khurana\n\n\nJan 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nir_category-present_tense\n\n\n2 min\n\n\n\nA1/A2\n\n\nir_verbes\n\n\npresent tense\n\n\n\n\nKunal Khurana\n\n\nJan 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPronunciation\n\n\n2 min\n\n\n\nA1/A2\n\n\nPronunciation\n\n\nFrench\n\n\n\n\nKunal Khurana\n\n\nJan 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nre_category-present_tense\n\n\n2 min\n\n\n\nA1/A2\n\n\nre_verbes\n\n\npresent tense\n\n\n\n\nKunal Khurana\n\n\nJan 24, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/semainedu20janvier/er_verbes.html",
    "href": "posts/semainedu20janvier/er_verbes.html",
    "title": "er_category-present_tense",
    "section": "",
    "text": "In French, -er verbs are the most common and are considered regular verbs. These verbs follow a standard conjugation pattern in different tenses, making them relatively easy to learn. To conjugate an -er verb in the present tense, you begin by removing the -er ending from the infinitive form of the verb, leaving the stem. Then, you add the appropriate endings depending on the subject pronoun. For example, with the verb “parler” (to speak):\nje parle (I speak) tu parles (you speak, informal) il/elle parle (he/she speaks) nous parlons (we speak) vous parlez (you speak, formal/plural) ils/elles parlent (they speak) The endings for the present tense are: -e, -es, -e, -ons, -ez, -ent. These are applied to all regular -er verbs.\nYou can look at this pdf for detailed explanation."
  },
  {
    "objectID": "posts/semainedu20janvier/numbers.html",
    "href": "posts/semainedu20janvier/numbers.html",
    "title": "Numbers",
    "section": "",
    "text": "In French, numbers are pronounced in a structured way that follows specific rules. Numbers 1 through 16 have unique names, such as “un” (1), “deux” (2), and “dix-sept” (17). For numbers between 17 and 69, they are formed by combining the tens and ones, such as “vingt-trois” (23) or “quarante-neuf” (49). For numbers 70 and above, the system changes slightly. In France, 70 is said as “soixante-dix” (literally “sixty-ten”), 71 as “soixante-et-onze” (“sixty-eleven”), and so on, up to 79. Numbers in the 80s are based on “quatre-vingts” (literally “four twenties”), so 82 is “quatre-vingt-deux.” For numbers in the 90s, it combines “quatre-vingt” with the numbers from 10 to 19, like “quatre-vingt-dix” (90) or “quatre-vingt-quatorze” (94). Large numbers, like thousands, are pronounced similarly to English, with “mille” for 1,000 or “million” for 1,000,000.\nYou may look at these pdfs to learn more numbers1to20, numbers21to2billion."
  },
  {
    "objectID": "posts/semainedu20janvier/resources.html",
    "href": "posts/semainedu20janvier/resources.html",
    "title": "Useful resouces",
    "section": "",
    "text": "In this video, a variety of helpful resources for learning French are shared, perfect for beginners and advanced learners alike. For those starting with French, Cliff Notes offers a structured guide to help grasp the basics of French I. French learners can also immerse themselves in the language with French news channels, such as those listed on Regard sur le Français, which provides a comprehensive list of Francophone news outlets. For those preparing for the TEF exam, Prep My Future offers tailored practice and resources to help boost your readiness. To master French grammar, the Par ici workbook is an excellent resource, available on Amazon, offering exercises that cater to different levels. Whether you’re looking to practice daily or prepare for exams, these resources cover all aspects of French language learning, from vocabulary and grammar to real-world news and exam prep."
  },
  {
    "objectID": "posts/semainedu20janvier/verbs.html",
    "href": "posts/semainedu20janvier/verbs.html",
    "title": "Sujet+aller+verbe",
    "section": "",
    "text": "The verb aller (to go) is commonly used in French to describe the present or the near future without conjugating other verbs. To do this, conjugate aller in the present tense (e.g., je vais, tu vas, il/elle va, nous allons, vous allez, ils/elles vont) followed by the infinitive form of the main verb. For example, je vais manger means “I am going to eat,” and nous allons voyager means “we are going to travel.” This structure helps you express actions happening soon without needing to conjugate the main verb.\nHere are some examples:\n\nExample-1\nExample-2"
  },
  {
    "objectID": "posts/semainedu27janvier/greetings.html",
    "href": "posts/semainedu27janvier/greetings.html",
    "title": "greetings/salutations",
    "section": "",
    "text": "In today’s lecture, we’ve explored the richness of the French language, from its cultural nuances to practical everyday use. We discussed greetings like “Bonjour” for daytime and “Bonsoir” for evenings, as well as the formal use of “Madame” (for women) and “Monsieur” (for men). We also covered daily conversations, such as asking “Comment ça va?” (How are you?) or “Où est la boulangerie?” (Where is the bakery?). Additionally, we went over basic household items like “la table” (the table), “le lit” (the bed), and “le frigo” (the fridge) to help you navigate French-speaking environments with ease. Whether you’re a language enthusiast or just starting out, these essentials are a great foundation for building your French skills!"
  },
  {
    "objectID": "payment_gateway.html",
    "href": "payment_gateway.html",
    "title": "French with Kunal",
    "section": "",
    "text": "! pip install stripe\n\nRequirement already satisfied: stripe in c:\\users\\khura\\anaconda3\\lib\\site-packages (11.5.0)\nRequirement already satisfied: requests&gt;=2.20 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from stripe) (2.31.0)\nRequirement already satisfied: typing-extensions&gt;=4.5.0 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from stripe) (4.12.2)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from requests&gt;=2.20-&gt;stripe) (2.0.4)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from requests&gt;=2.20-&gt;stripe) (3.4)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from requests&gt;=2.20-&gt;stripe) (1.26.16)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from requests&gt;=2.20-&gt;stripe) (2023.11.17)\n\n\n\nimport os\nimport stripe\n\napp = Flask(__name__)\napp.secret_key = 'your_flask_secret_key'\n\n# Stripe configuration\nstripe.api_key = os.getenv('STRIPE_SECRET_KEY')  # Load from environment variables\nstripe_publishable_key = os.getenv('STRIPE_PUBLISHABLE_KEY')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 4\n      1 import os\n      2 import stripe\n----&gt; 4 app = Flask(__name__)\n      5 app.secret_key = 'your_flask_secret_key'\n      7 # Stripe configuration\n\nNameError: name 'Flask' is not defined\n\n\n\n\nfrom flask import jsonify\n\n@app.route('/create-checkout-session', methods=['POST'])\ndef create_checkout_session():\n    try:\n        checkout_session = stripe.checkout.Session.create(\n            payment_method_types=['card'],\n            line_items=[{\n                'price_data': {\n                    'currency': 'usd',\n                    'product_data': {\n                        'name': 'French Course Subscription',\n                    },\n                    'unit_amount': 2000,  # $20.00 (in cents)\n                },\n                'quantity': 1,\n            }],\n            mode='payment',\n            success_url=url_for('success', _external=True),\n            cancel_url=url_for('cancel', _external=True),\n        )\n        return jsonify({'id': checkout_session.id})\n    except Exception as e:\n        return str(e), 400\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 3\n      1 from flask import jsonify\n----&gt; 3 @app.route('/create-checkout-session', methods=['POST'])\n      4 def create_checkout_session():\n      5     try:\n      6         checkout_session = stripe.checkout.Session.create(\n      7             payment_method_types=['card'],\n      8             line_items=[{\n   (...)\n     20             cancel_url=url_for('cancel', _external=True),\n     21         )\n\nNameError: name 'app' is not defined\n\n\n\n\nfrom flask import Flask, render_template, request, jsonify, url_for\nimport stripe\nimport os\n\napp = Flask(__name__)\napp.secret_key = 'your_flask_secret_key'\n\n# Stripe configuration\nstripe.api_key = os.getenv('STRIPE_SECRET_KEY')\nstripe_publishable_key = os.getenv('STRIPE_PUBLISHABLE_KEY')\n\n@app.route('/')\ndef home():\n    return render_template('index.html', stripe_publishable_key=stripe_publishable_key)\n\n@app.route('/create-checkout-session', methods=['POST'])\ndef create_checkout_session():\n    try:\n        checkout_session = stripe.checkout.Session.create(\n            payment_method_types=['card'],\n            line_items=[{\n                'price_data': {\n                    'currency': 'cad',\n                    'product_data': {\n                        'name': 'French Course Subscription',\n                    },\n                    'unit_amount': 2000,  # $20.00 (in cents)\n                },\n                'quantity': 1,\n            }],\n            mode='payment',\n            success_url=url_for('success', _external=True),\n            cancel_url=url_for('cancel', _external=True),\n        )\n        return jsonify({'id': checkout_session.id})\n    except Exception as e:\n        return str(e), 400\n\n@app.route('/success')\ndef success():\n    return \"Payment successful! Thank you for subscribing.\"\n\n@app.route('/cancel')\ndef cancel():\n    return \"Payment canceled. Please try again.\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1\n\n\n\n\nC:\\Users\\khura\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:3534: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)"
  },
  {
    "objectID": "new_user_login.html",
    "href": "new_user_login.html",
    "title": "French with Kunal",
    "section": "",
    "text": "!pip install flask flask-login flask-sqlalchemy\n\nRequirement already satisfied: flask in c:\\users\\khura\\anaconda3\\lib\\site-packages (3.1.0)\nRequirement already satisfied: flask-login in c:\\users\\khura\\anaconda3\\lib\\site-packages (0.6.3)\nRequirement already satisfied: flask-sqlalchemy in c:\\users\\khura\\anaconda3\\lib\\site-packages (3.1.1)\nRequirement already satisfied: Werkzeug&gt;=3.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask) (3.1.3)\nRequirement already satisfied: Jinja2&gt;=3.1.2 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask) (3.1.2)\nRequirement already satisfied: itsdangerous&gt;=2.2 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask) (2.2.0)\nRequirement already satisfied: click&gt;=8.1.3 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask) (8.1.8)\nRequirement already satisfied: blinker&gt;=1.9 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask) (1.9.0)\nRequirement already satisfied: sqlalchemy&gt;=2.0.16 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask-sqlalchemy) (2.0.37)\nRequirement already satisfied: colorama in c:\\users\\khura\\anaconda3\\lib\\site-packages (from click&gt;=8.1.3-&gt;flask) (0.4.6)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Jinja2&gt;=3.1.2-&gt;flask) (2.1.1)\nRequirement already satisfied: greenlet!=0.4.17 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from sqlalchemy&gt;=2.0.16-&gt;flask-sqlalchemy) (2.0.1)\nRequirement already satisfied: typing-extensions&gt;=4.6.0 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from sqlalchemy&gt;=2.0.16-&gt;flask-sqlalchemy) (4.12.2)\n\n\n\n[notice] A new release of pip is available: 24.3.1 -&gt; 25.0\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\n! pip install flask_bcrypt\n\nCollecting flask_bcrypt\n  Downloading Flask_Bcrypt-1.0.1-py3-none-any.whl.metadata (2.6 kB)\nRequirement already satisfied: Flask in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask_bcrypt) (3.1.0)\nRequirement already satisfied: bcrypt&gt;=3.1.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from flask_bcrypt) (3.2.0)\nRequirement already satisfied: cffi&gt;=1.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from bcrypt&gt;=3.1.1-&gt;flask_bcrypt) (1.15.1)\nRequirement already satisfied: six&gt;=1.4.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from bcrypt&gt;=3.1.1-&gt;flask_bcrypt) (1.16.0)\nRequirement already satisfied: Werkzeug&gt;=3.1 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Flask-&gt;flask_bcrypt) (3.1.3)\nRequirement already satisfied: Jinja2&gt;=3.1.2 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Flask-&gt;flask_bcrypt) (3.1.2)\nRequirement already satisfied: itsdangerous&gt;=2.2 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Flask-&gt;flask_bcrypt) (2.2.0)\nRequirement already satisfied: click&gt;=8.1.3 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Flask-&gt;flask_bcrypt) (8.1.8)\nRequirement already satisfied: blinker&gt;=1.9 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Flask-&gt;flask_bcrypt) (1.9.0)\nRequirement already satisfied: pycparser in c:\\users\\khura\\anaconda3\\lib\\site-packages (from cffi&gt;=1.1-&gt;bcrypt&gt;=3.1.1-&gt;flask_bcrypt) (2.21)\nRequirement already satisfied: colorama in c:\\users\\khura\\anaconda3\\lib\\site-packages (from click&gt;=8.1.3-&gt;Flask-&gt;flask_bcrypt) (0.4.6)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\khura\\anaconda3\\lib\\site-packages (from Jinja2&gt;=3.1.2-&gt;Flask-&gt;flask_bcrypt) (2.1.1)\nDownloading Flask_Bcrypt-1.0.1-py3-none-any.whl (6.0 kB)\nInstalling collected packages: flask_bcrypt\nSuccessfully installed flask_bcrypt-1.0.1\n\n\n\n[notice] A new release of pip is available: 24.3.1 -&gt; 25.0\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\n! pip install pymysql\n\nCollecting pymysql\n  Downloading PyMySQL-1.1.1-py3-none-any.whl.metadata (4.4 kB)\nDownloading PyMySQL-1.1.1-py3-none-any.whl (44 kB)\nInstalling collected packages: pymysql\nSuccessfully installed pymysql-1.1.1\n\n\n\n[notice] A new release of pip is available: 24.3.1 -&gt; 25.0\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\nimport os\nos.urandom(24).hex()\n\n'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n\n\nfrom flask import Flask, render_template, request, redirect, url_for, flash\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_bcrypt import Bcrypt\nimport secrets\n\napp = Flask(__name__)\napp.secret_key = 'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://my_user:password@localhost/my_database'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'\n\n# User model\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    email_verified = db.Column(db.Boolean, default=False)\n    verification_token = db.Column(db.String(255))\n    created_at = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp())\n    updated_at = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())\n    last_login = db.Column(db.TIMESTAMP)\n    reset_token = db.Column(db.String(255))\n    reset_token_expires = db.Column(db.TIMESTAMP)\n    status = db.Column(db.String(50), default='active')\n\n    def set_password(self, password):\n        self.password_hash = bcrypt.generate_password_hash(password).decode('utf-8')\n\n    def check_password(self, password):\n        return bcrypt.check_password_hash(self.password_hash, password)\n\n# Load user for Flask-Login\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n# Routes\n@app.route('/')\ndef home():\n    return render_template('home.html')\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n\n        # Check if user already exists\n        if User.query.filter_by(email=email).first():\n            flash('Email already registered!', 'danger')\n            return redirect(url_for('register'))\n\n        # Create new user\n        new_user = User(email=email)\n        new_user.set_password(password)\n        new_user.verification_token = secrets.token_urlsafe(32)  # Generate verification token\n\n        db.session.add(new_user)\n        db.session.commit()\n\n        # Send verification email (pseudo-code)\n        send_verification_email(new_user.email, new_user.verification_token)\n\n        flash('Registration successful! Please check your email to verify your account.', 'success')\n        return redirect(url_for('login'))\n\n    return render_template('register.html')\n\n@app.route('/verify/&lt;token&gt;')\ndef verify_email(token):\n    user = User.query.filter_by(verification_token=token).first()\n\n    if user:\n        user.email_verified = True\n        user.verification_token = None  # Clear the token after verification\n        db.session.commit()\n        flash('Email verified successfully!', 'success')\n    else:\n        flash('Invalid or expired token.', 'danger')\n\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n\n        user = User.query.filter_by(email=email).first()\n\n        if user and user.check_password(password):\n            if user.email_verified:\n                login_user(user)\n                user.last_login = db.func.current_timestamp()  # Update last login time\n                db.session.commit()\n                flash('Login successful!', 'success')\n                return redirect(url_for('dashboard'))\n            else:\n                flash('Please verify your email before logging in.', 'warning')\n        else:\n            flash('Invalid email or password.', 'danger')\n\n    return render_template('login.html')\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    return render_template('dashboard.html', user=current_user)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out.', 'success')\n    return redirect(url_for('home'))\n\n# Helper function to send verification email (pseudo-code)\ndef send_verification_email(email, token):\n    verification_link = f\"http://localhost:5000/verify/{token}\"\n    print(f\"Sending verification email to {email} with link: {verification_link}\")\n    # Use a library like Flask-Mail to send the actual email\n\n# Run the application\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()  # Create database tables\n    app.run(debug=True)\n\n\n---------------------------------------------------------------------------\nOperationalError                          Traceback (most recent call last)\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:146, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)\n    145 try:\n--&gt; 146     self._dbapi_connection = engine.raw_connection()\n    147 except dialect.loaded_dbapi.Error as err:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3298, in Engine.raw_connection(self)\n   3277 \"\"\"Return a \"raw\" DBAPI connection from the connection pool.\n   3278 \n   3279 The returned object is a proxied version of the DBAPI\n   (...)\n   3296 \n   3297 \"\"\"\n-&gt; 3298 return self.pool.connect()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:449, in Pool.connect(self)\n    442 \"\"\"Return a DBAPI connection from the pool.\n    443 \n    444 The connection is instrumented such that when its\n   (...)\n    447 \n    448 \"\"\"\n--&gt; 449 return _ConnectionFairy._checkout(self)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1263, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy)\n   1262 if not fairy:\n-&gt; 1263     fairy = _ConnectionRecord.checkout(pool)\n   1265     if threadconns is not None:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:712, in _ConnectionRecord.checkout(cls, pool)\n    711 else:\n--&gt; 712     rec = pool._do_get()\n    714 try:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:179, in QueuePool._do_get(self)\n    178 except:\n--&gt; 179     with util.safe_reraise():\n    180         self._dec_overflow()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146, in safe_reraise.__exit__(self, type_, value, traceback)\n    145     self._exc_info = None  # remove potential circular references\n--&gt; 146     raise exc_value.with_traceback(exc_tb)\n    147 else:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177, in QueuePool._do_get(self)\n    176 try:\n--&gt; 177     return self._create_connection()\n    178 except:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:390, in Pool._create_connection(self)\n    388 \"\"\"Called by subclasses to create a new ConnectionRecord.\"\"\"\n--&gt; 390 return _ConnectionRecord(self)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:674, in _ConnectionRecord.__init__(self, pool, connect)\n    673 if connect:\n--&gt; 674     self.__connect()\n    675 self.finalize_callback = deque()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:900, in _ConnectionRecord.__connect(self)\n    899 except BaseException as e:\n--&gt; 900     with util.safe_reraise():\n    901         pool.logger.debug(\"Error on connect(): %s\", e)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146, in safe_reraise.__exit__(self, type_, value, traceback)\n    145     self._exc_info = None  # remove potential circular references\n--&gt; 146     raise exc_value.with_traceback(exc_tb)\n    147 else:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:896, in _ConnectionRecord.__connect(self)\n    895 self.starttime = time.time()\n--&gt; 896 self.dbapi_connection = connection = pool._invoke_creator(self)\n    897 pool.logger.debug(\"Created new connection %r\", connection)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:646, in create_engine.&lt;locals&gt;.connect(connection_record)\n    644             return connection\n--&gt; 646 return dialect.connect(*cargs, **cparams)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:622, in DefaultDialect.connect(self, *cargs, **cparams)\n    620 def connect(self, *cargs, **cparams):\n    621     # inherits the docstring from interfaces.Dialect.connect\n--&gt; 622     return self.loaded_dbapi.connect(*cargs, **cparams)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:361, in Connection.__init__(self, user, password, host, database, unix_socket, port, charset, collation, sql_mode, read_default_file, conv, use_unicode, client_flag, cursorclass, init_command, connect_timeout, read_default_group, autocommit, local_infile, max_allowed_packet, defer_connect, auth_plugin_map, read_timeout, write_timeout, bind_address, binary_prefix, program_name, server_public_key, ssl, ssl_ca, ssl_cert, ssl_disabled, ssl_key, ssl_key_password, ssl_verify_cert, ssl_verify_identity, compress, named_pipe, passwd, db)\n    360 else:\n--&gt; 361     self.connect()\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:669, in Connection.connect(self, sock)\n    668 self._get_server_information()\n--&gt; 669 self._request_authentication()\n    671 # Send \"SET NAMES\" query on init for:\n    672 # - Ensure charaset (and collation) is set to the server.\n    673 #   - collation_id in handshake packet may be ignored.\n   (...)\n    682 # - https://github.com/wagtail/wagtail/issues/9477\n    683 # - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:957, in Connection._request_authentication(self)\n    956 self.write_packet(data)\n--&gt; 957 auth_packet = self._read_packet()\n    959 # if authentication method isn't accepted the first byte\n    960 # will have the octet 254\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:775, in Connection._read_packet(self, packet_type)\n    774         self._result.unbuffered_active = False\n--&gt; 775     packet.raise_for_error()\n    776 return packet\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\protocol.py:219, in MysqlPacket.raise_for_error(self)\n    218     print(\"errno =\", errno)\n--&gt; 219 err.raise_mysql_exception(self._data)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\err.py:150, in raise_mysql_exception(data)\n    149     errorclass = InternalError if errno &lt; 1000 else OperationalError\n--&gt; 150 raise errorclass(errno, errval)\n\nOperationalError: (1045, \"Access denied for user 'my_user'@'localhost' (using password: YES)\")\n\nThe above exception was the direct cause of the following exception:\n\nOperationalError                          Traceback (most recent call last)\nCell In[6], line 133\n    131 if __name__ == '__main__':\n    132     with app.app_context():\n--&gt; 133         db.create_all()  # Create database tables\n    134     app.run(debug=True)\n\nFile ~\\anaconda3\\Lib\\site-packages\\flask_sqlalchemy\\extension.py:900, in SQLAlchemy.create_all(self, bind_key)\n    883 def create_all(self, bind_key: str | None | list[str | None] = \"__all__\") -&gt; None:\n    884     \"\"\"Create tables that do not exist in the database by calling\n    885     ``metadata.create_all()`` for all or some bind keys. This does not\n    886     update existing tables, use a migration library for that.\n   (...)\n    898         Added the ``bind`` and ``app`` parameters.\n    899     \"\"\"\n--&gt; 900     self._call_for_binds(bind_key, \"create_all\")\n\nFile ~\\anaconda3\\Lib\\site-packages\\flask_sqlalchemy\\extension.py:881, in SQLAlchemy._call_for_binds(self, bind_key, op_name)\n    878     raise sa_exc.UnboundExecutionError(message) from None\n    880 metadata = self.metadatas[key]\n--&gt; 881 getattr(metadata, op_name)(bind=engine)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:5900, in MetaData.create_all(self, bind, tables, checkfirst)\n   5876 def create_all(\n   5877     self,\n   5878     bind: _CreateDropBind,\n   5879     tables: Optional[_typing_Sequence[Table]] = None,\n   5880     checkfirst: bool = True,\n   5881 ) -&gt; None:\n   5882     \"\"\"Create all tables stored in this metadata.\n   5883 \n   5884     Conditional by default, will not attempt to recreate tables already\n   (...)\n   5898 \n   5899     \"\"\"\n-&gt; 5900     bind._run_ddl_visitor(\n   5901         ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables\n   5902     )\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3248, in Engine._run_ddl_visitor(self, visitorcallable, element, **kwargs)\n   3242 def _run_ddl_visitor(\n   3243     self,\n   3244     visitorcallable: Type[Union[SchemaGenerator, SchemaDropper]],\n   3245     element: SchemaItem,\n   3246     **kwargs: Any,\n   3247 ) -&gt; None:\n-&gt; 3248     with self.begin() as conn:\n   3249         conn._run_ddl_visitor(visitorcallable, element, **kwargs)\n\nFile ~\\anaconda3\\Lib\\contextlib.py:137, in _GeneratorContextManager.__enter__(self)\n    135 del self.args, self.kwds, self.func\n    136 try:\n--&gt; 137     return next(self.gen)\n    138 except StopIteration:\n    139     raise RuntimeError(\"generator didn't yield\") from None\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3238, in Engine.begin(self)\n   3213 @contextlib.contextmanager\n   3214 def begin(self) -&gt; Iterator[Connection]:\n   3215     \"\"\"Return a context manager delivering a :class:`_engine.Connection`\n   3216     with a :class:`.Transaction` established.\n   3217 \n   (...)\n   3236 \n   3237     \"\"\"  # noqa: E501\n-&gt; 3238     with self.connect() as conn:\n   3239         with conn.begin():\n   3240             yield conn\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3274, in Engine.connect(self)\n   3251 def connect(self) -&gt; Connection:\n   3252     \"\"\"Return a new :class:`_engine.Connection` object.\n   3253 \n   3254     The :class:`_engine.Connection` acts as a Python context manager, so\n   (...)\n   3271 \n   3272     \"\"\"\n-&gt; 3274     return self._connection_cls(self)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:148, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)\n    146         self._dbapi_connection = engine.raw_connection()\n    147     except dialect.loaded_dbapi.Error as err:\n--&gt; 148         Connection._handle_dbapi_exception_noconnection(\n    149             err, dialect, engine\n    150         )\n    151         raise\n    152 else:\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2439, in Connection._handle_dbapi_exception_noconnection(cls, e, dialect, engine, is_disconnect, invalidate_pool_on_disconnect, is_pre_ping)\n   2437 elif should_wrap:\n   2438     assert sqlalchemy_exception is not None\n-&gt; 2439     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n   2440 else:\n   2441     assert exc_info[1] is not None\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:146, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)\n    144 if connection is None:\n    145     try:\n--&gt; 146         self._dbapi_connection = engine.raw_connection()\n    147     except dialect.loaded_dbapi.Error as err:\n    148         Connection._handle_dbapi_exception_noconnection(\n    149             err, dialect, engine\n    150         )\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3298, in Engine.raw_connection(self)\n   3276 def raw_connection(self) -&gt; PoolProxiedConnection:\n   3277     \"\"\"Return a \"raw\" DBAPI connection from the connection pool.\n   3278 \n   3279     The returned object is a proxied version of the DBAPI\n   (...)\n   3296 \n   3297     \"\"\"\n-&gt; 3298     return self.pool.connect()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:449, in Pool.connect(self)\n    441 def connect(self) -&gt; PoolProxiedConnection:\n    442     \"\"\"Return a DBAPI connection from the pool.\n    443 \n    444     The connection is instrumented such that when its\n   (...)\n    447 \n    448     \"\"\"\n--&gt; 449     return _ConnectionFairy._checkout(self)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1263, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy)\n   1255 @classmethod\n   1256 def _checkout(\n   1257     cls,\n   (...)\n   1260     fairy: Optional[_ConnectionFairy] = None,\n   1261 ) -&gt; _ConnectionFairy:\n   1262     if not fairy:\n-&gt; 1263         fairy = _ConnectionRecord.checkout(pool)\n   1265         if threadconns is not None:\n   1266             threadconns.current = weakref.ref(fairy)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:712, in _ConnectionRecord.checkout(cls, pool)\n    710     rec = cast(_ConnectionRecord, pool._do_get())\n    711 else:\n--&gt; 712     rec = pool._do_get()\n    714 try:\n    715     dbapi_connection = rec.get_connection()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:179, in QueuePool._do_get(self)\n    177     return self._create_connection()\n    178 except:\n--&gt; 179     with util.safe_reraise():\n    180         self._dec_overflow()\n    181     raise\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146, in safe_reraise.__exit__(self, type_, value, traceback)\n    144     assert exc_value is not None\n    145     self._exc_info = None  # remove potential circular references\n--&gt; 146     raise exc_value.with_traceback(exc_tb)\n    147 else:\n    148     self._exc_info = None  # remove potential circular references\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177, in QueuePool._do_get(self)\n    175 if self._inc_overflow():\n    176     try:\n--&gt; 177         return self._create_connection()\n    178     except:\n    179         with util.safe_reraise():\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:390, in Pool._create_connection(self)\n    387 def _create_connection(self) -&gt; ConnectionPoolEntry:\n    388     \"\"\"Called by subclasses to create a new ConnectionRecord.\"\"\"\n--&gt; 390     return _ConnectionRecord(self)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:674, in _ConnectionRecord.__init__(self, pool, connect)\n    672 self.__pool = pool\n    673 if connect:\n--&gt; 674     self.__connect()\n    675 self.finalize_callback = deque()\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:900, in _ConnectionRecord.__connect(self)\n    898     self.fresh = True\n    899 except BaseException as e:\n--&gt; 900     with util.safe_reraise():\n    901         pool.logger.debug(\"Error on connect(): %s\", e)\n    902 else:\n    903     # in SQLAlchemy 1.4 the first_connect event is not used by\n    904     # the engine, so this will usually not be set\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146, in safe_reraise.__exit__(self, type_, value, traceback)\n    144     assert exc_value is not None\n    145     self._exc_info = None  # remove potential circular references\n--&gt; 146     raise exc_value.with_traceback(exc_tb)\n    147 else:\n    148     self._exc_info = None  # remove potential circular references\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:896, in _ConnectionRecord.__connect(self)\n    894 try:\n    895     self.starttime = time.time()\n--&gt; 896     self.dbapi_connection = connection = pool._invoke_creator(self)\n    897     pool.logger.debug(\"Created new connection %r\", connection)\n    898     self.fresh = True\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:646, in create_engine.&lt;locals&gt;.connect(connection_record)\n    643         if connection is not None:\n    644             return connection\n--&gt; 646 return dialect.connect(*cargs, **cparams)\n\nFile ~\\anaconda3\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:622, in DefaultDialect.connect(self, *cargs, **cparams)\n    620 def connect(self, *cargs, **cparams):\n    621     # inherits the docstring from interfaces.Dialect.connect\n--&gt; 622     return self.loaded_dbapi.connect(*cargs, **cparams)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:361, in Connection.__init__(self, user, password, host, database, unix_socket, port, charset, collation, sql_mode, read_default_file, conv, use_unicode, client_flag, cursorclass, init_command, connect_timeout, read_default_group, autocommit, local_infile, max_allowed_packet, defer_connect, auth_plugin_map, read_timeout, write_timeout, bind_address, binary_prefix, program_name, server_public_key, ssl, ssl_ca, ssl_cert, ssl_disabled, ssl_key, ssl_key_password, ssl_verify_cert, ssl_verify_identity, compress, named_pipe, passwd, db)\n    359     self._sock = None\n    360 else:\n--&gt; 361     self.connect()\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:669, in Connection.connect(self, sock)\n    666 self._next_seq_id = 0\n    668 self._get_server_information()\n--&gt; 669 self._request_authentication()\n    671 # Send \"SET NAMES\" query on init for:\n    672 # - Ensure charaset (and collation) is set to the server.\n    673 #   - collation_id in handshake packet may be ignored.\n   (...)\n    682 # - https://github.com/wagtail/wagtail/issues/9477\n    683 # - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)\n    684 self.set_character_set(self.charset, self.collation)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:957, in Connection._request_authentication(self)\n    954     data += _lenenc_int(len(connect_attrs)) + connect_attrs\n    956 self.write_packet(data)\n--&gt; 957 auth_packet = self._read_packet()\n    959 # if authentication method isn't accepted the first byte\n    960 # will have the octet 254\n    961 if auth_packet.is_auth_switch_request():\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\connections.py:775, in Connection._read_packet(self, packet_type)\n    773     if self._result is not None and self._result.unbuffered_active is True:\n    774         self._result.unbuffered_active = False\n--&gt; 775     packet.raise_for_error()\n    776 return packet\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\protocol.py:219, in MysqlPacket.raise_for_error(self)\n    217 if DEBUG:\n    218     print(\"errno =\", errno)\n--&gt; 219 err.raise_mysql_exception(self._data)\n\nFile ~\\anaconda3\\Lib\\site-packages\\pymysql\\err.py:150, in raise_mysql_exception(data)\n    148 if errorclass is None:\n    149     errorclass = InternalError if errno &lt; 1000 else OperationalError\n--&gt; 150 raise errorclass(errno, errval)\n\nOperationalError: (pymysql.err.OperationalError) (1045, \"Access denied for user 'my_user'@'localhost' (using password: YES)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n\n\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport logging\n\napp = Flask(__name__)\napp.secret_key = 'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://my_user:password@localhost/my_database'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Enable SQLAlchemy logging\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\ndb = SQLAlchemy(app)\n\n# Test database connection\ntry:\n    with app.app_context():\n        db.engine.connect()\n        print(\"Database connection successful!\")\nexcept Exception as e:\n    print(f\"Database connection failed: {e}\")\n\n# Run the application\nif __name__ == '__main__':\n    app.run(debug=True)\n\nDatabase connection failed: (pymysql.err.OperationalError) (1045, \"Access denied for user 'my_user'@'localhost' (using password: YES)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nINFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nINFO:werkzeug:Press CTRL+C to quit\nINFO:werkzeug: * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1\n\n\n\n\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport logging\n\napp = Flask(__name__)\napp.secret_key = 'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://username:password@localhost/db_name'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Enable SQLAlchemy logging\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\ndb = SQLAlchemy(app)\n\n# Test database connection\ntry:\n    with app.app_context():\n        db.engine.connect()\n        print(\"Database connection successful!\")\nexcept Exception as e:\n    print(f\"Database connection failed: {e}\")\n\n# Run the application\nif __name__ == '__main__':\n    app.run(debug=True)\n\nDatabase connection failed: (pymysql.err.OperationalError) (1045, \"Access denied for user 'username'@'localhost' (using password: YES)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nINFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nINFO:werkzeug:Press CTRL+C to quit\nINFO:werkzeug: * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1\n\n\n\n\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport logging\n\napp = Flask(__name__)\napp.secret_key = 'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://username:password@localhost/db_name'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Enable SQLAlchemy logging\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\ndb = SQLAlchemy(app)\n\n# Test database connection\ntry:\n    with app.app_context():\n        db.engine.connect()\n        print(\"Database connection successful!\")\nexcept Exception as e:\n    print(f\"Database connection failed: {e}\")\n\n# Run the application\nif __name__ == '__main__':\n    app.run(debug=True)\n\nDatabase connection failed: (pymysql.err.OperationalError) (1045, \"Access denied for user 'username'@'localhost' (using password: YES)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nINFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nINFO:werkzeug:Press CTRL+C to quit\nINFO:werkzeug: * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1\n\n\n\n\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport logging\n\napp = Flask(__name__)\napp.secret_key = 'f8e323875a6103f71c9705a03f5f6fc2698a33e1894c1de6'\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://username:password@localhost/frenchwithkunal'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Enable SQLAlchemy logging\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\ndb = SQLAlchemy(app)\n\n# Test database connection\ntry:\n    with app.app_context():\n        db.engine.connect()\n        print(\"Database connection successful!\")\nexcept Exception as e:\n    print(f\"Database connection failed: {e}\")\n\n# Run the application\nif __name__ == '__main__':\n    app.run(debug=True)\n\nDatabase connection failed: (pymysql.err.OperationalError) (1045, \"Access denied for user 'username'@'localhost' (using password: YES)\")\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nINFO:werkzeug:WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nINFO:werkzeug:Press CTRL+C to quit\nINFO:werkzeug: * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1\n\n\n\n\n\n%tb\n\n\n---------------------------------------------------------------------------\nSystemExit                                Traceback (most recent call last)\nCell In[13], line 28\n     26 # Run the application\n     27 if __name__ == '__main__':\n---&gt; 28     app.run(debug=True)\n\nFile ~\\anaconda3\\Lib\\site-packages\\flask\\app.py:662, in Flask.run(self, host, port, debug, load_dotenv, **options)\n    659 from werkzeug.serving import run_simple\n    661 try:\n--&gt; 662     run_simple(t.cast(str, host), port, self, **options)\n    663 finally:\n    664     # reset the first request information if the development server\n    665     # reset normally.  This makes it possible to restart the server\n    666     # without reloader and that stuff from an interactive shell.\n    667     self._got_first_request = False\n\nFile ~\\anaconda3\\Lib\\site-packages\\werkzeug\\serving.py:1115, in run_simple(hostname, port, application, use_reloader, use_debugger, use_evalex, extra_files, exclude_patterns, reloader_interval, reloader_type, threaded, processes, request_handler, static_files, passthrough_errors, ssl_context)\n   1112 from ._reloader import run_with_reloader\n   1114 try:\n-&gt; 1115     run_with_reloader(\n   1116         srv.serve_forever,\n   1117         extra_files=extra_files,\n   1118         exclude_patterns=exclude_patterns,\n   1119         interval=reloader_interval,\n   1120         reloader_type=reloader_type,\n   1121     )\n   1122 finally:\n   1123     srv.server_close()\n\nFile ~\\anaconda3\\Lib\\site-packages\\werkzeug\\_reloader.py:469, in run_with_reloader(main_func, extra_files, exclude_patterns, interval, reloader_type)\n    467             reloader.run()\n    468     else:\n--&gt; 469         sys.exit(reloader.restart_with_reloader())\n    470 except KeyboardInterrupt:\n    471     pass\n\nSystemExit: 1\n\n\n\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n * Serving Flask app '__main__'\n * Debug mode: on\n\n\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with watchdog (windowsapi)\n\n\n\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit: 1"
  },
  {
    "objectID": "payment.html",
    "href": "payment.html",
    "title": "Subscribe to French Course",
    "section": "",
    "text": "Choose a plan that works best for you:\n\n\n\n$50/month\n\nAccess to all lessons\nNew content every week\nCancel anytime\n\n\nSubscribe Now\n\n\n\n\n$450/year\nSave 25% (Originally $600)\n\nAccess to all lessons\nNew content every week\n3 months free compared to monthly\n\n\nSubscribe Now\n\n\n\n\n$300/month\n\nPersonalized one-on-one coaching\nTailored lesson plans\nWeekly progress reviews\nDirect feedback and support\n\nSubscribe Now"
  },
  {
    "objectID": "payment.html#monthly-plan",
    "href": "payment.html#monthly-plan",
    "title": "Subscribe to French Course",
    "section": "",
    "text": "$50/month\n\nAccess to all lessons\nNew content every week\nCancel anytime\n\n\nSubscribe Now"
  },
  {
    "objectID": "payment.html#yearly-plan",
    "href": "payment.html#yearly-plan",
    "title": "Subscribe to French Course",
    "section": "",
    "text": "$450/year\nSave 25% (Originally $600)\n\nAccess to all lessons\nNew content every week\n3 months free compared to monthly\n\n\nSubscribe Now"
  },
  {
    "objectID": "payment.html#coaching-with-mentor",
    "href": "payment.html#coaching-with-mentor",
    "title": "Subscribe to French Course",
    "section": "",
    "text": "$300/month\n\nPersonalized one-on-one coaching\nTailored lesson plans\nWeekly progress reviews\nDirect feedback and support\n\nSubscribe Now"
  }
]