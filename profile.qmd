---
title: ""



format:
  html:
    include-in-header:
      - text: |
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
          <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
          <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
          <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
---

```{=html}
<div id="react-root"></div>
<script type="text/babel">


const ProfilePage = () => {


     const { useState,useEffect } = React;
     
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);








const storedUser = localStorage.getItem('accessToken');
   
console.log(storedUser,"storedUser")

  const [user, setUser] = useState(null);



  useEffect(() => {
    const storedToken = localStorage.getItem('accessToken');
  const userNavElement = document.querySelector('.me-auto');

    if (storedToken) {
      fetch('https://frenchwithkunal-cdf6ea3f88ce.herokuapp.com/api/v1/auth/me', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${storedToken}`,
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        console.log("User Data:", data);
        setUser(data.data);
        updateNavbar(data);
          setIsLoading(false);
      })
      .catch(error => {
        setIsLoading(false);
        console.error("Error fetching user data:", error)
        
        });
    }else{
  const loginNavItem = document.createElement('li');
 loginNavItem.classList.add('nav-item', 'user-nav-item');
      loginNavItem.innerHTML = `
        <a class="nav-link" href="/login.html">Login</a>
      `;
      userNavElement.appendChild(loginNavItem);
    
    } 

  }, []);


const updateNavbar = (userData) => {
  const userNavElement = document.querySelector('.me-auto');

    
    if (userData) {
      // Create a new list item for user navigation
      const userNavItem = document.createElement('li');
      userNavItem.classList.add('nav-item', 'dropdown', 'user-nav-item');
      
      userNavItem.innerHTML = `
        <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
          ${userData.name || 'User Profile'}
        </a>
        <ul class="dropdown-menu dropdown-menu-end">
          <li><a class="dropdown-item" href="/profile.html">Profile</a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item" href="#" id="logout-btn">Logout</a></li>
        </ul>
      `;
      
      // Add logout functionality
      userNavItem.querySelector('#logout-btn').addEventListener('click', (e) => {
        e.preventDefault();
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        setUser(null);
        updateNavbar(null);
        window.location.href = '/login.html'; // Redirect to login page
      });
      
      // Append the new user navigation item
      userNavElement.appendChild(userNavItem);
    } 
  
         
  
};















  useEffect(() => {
    const fetchUserProfile = async () => {
      const storedToken = localStorage.getItem('accessToken');
      
      if (!storedToken) {
        setError('No access token found. Please log in.');
        setIsLoading(false);
        return;
      }

      try {
        const response = await fetch('https://frenchwithkunal-cdf6ea3f88ce.herokuapp.com/api/v1/auth/me', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${storedToken}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to fetch user profile');
        }

        const data = await response.json();
console.log(data)


        setUserData(data.data);
        setIsLoading(false);
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
      }
    };

    fetchUserProfile();
  }, []);

  if (isLoading) {
    return (
      <div className="container mt-5 text-center">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger" role="alert">
          {error}
          <a href="/login.html" className="btn btn-primary ml-3">Log In</a>
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-5">
      <div className="row">
        <div className="col-md-8 offset-md-2">
          <div className="card">
            <div className="card-header bg-primary text-white">
              <h2 className="mb-0">User Profile</h2>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 text-center">
                  <i className="fas fa-user-circle fa-5x mb-3 text-muted"></i>
                </div>
                <div className="col-md-8">
                  <h3>{userData.name | ""}</h3>
                  <hr />
                  <div className="profile-details">
                    <p><strong>Email:</strong> {userData.email}</p>
                    <p><strong>Customer ID:</strong> {userData.customerId}</p>
                    <p><strong>Account Created:</strong> {new Date(userData.createdAt).toLocaleDateString()}</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="card-footer">
              <button 
                className="btn btn-danger" 
                onClick={() => {
                  localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
                  window.location.href = '/login.html';
                }}
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

ReactDOM.render(
  <ProfilePage />,
  document.getElementById('react-root')
);
</script>