---
title: ""

format:
  html:
    include-in-header:
      - text: |
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
          <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
          <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
          <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
---

```{=html}

<div id="react-root"></div>

<script type="text/babel">
const urlParams = new URLSearchParams(window.location.search);
const is_french = urlParams.get('lang') === 'fr'; // Default is English unless 'lang=fr' is in the URL

  function LoginForm() {
    const { useState } = React;
    const [isLoading, setIsLoading] = useState(false);
    const [formData, setFormData] = useState({ email: "", password: "" });

    const handleSubmit = async (e) => {
      e.preventDefault();
      setIsLoading(true);
      try {
        const response = await fetch("https://frenchwithkunal-cdf6ea3f88ce.herokuapp.com/api/v1/auth/signin", {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });
        const data = await response.json();
        if (!data.success) alert(data.message);
        if (data.success) {
          localStorage.setItem("accessToken", data.data.accessToken);
          localStorage.setItem("refreshToken", data.data.refreshToken);
          window.location.href = "https://frenchwithkunal.ca";
        }
      } catch (error) {
        console.error('Error during sign-in:', error.message);
      } finally {
        setIsLoading(false);
      }
    };

    const texts = {
      "welcome": is_french ? "Bienvenue" : "Welcome Back",
      "email": is_french ? "Email" : "Email",
      "password": is_french ? "Mot de passe" : "Password",
      "forgot": is_french ? "Mot de passe oubli√©?" : "Forgot password?",
      "signin": is_french ? "Se connecter" : "Sign In",
      "no_account": is_french ? "Pas de compte?" : "Don't have an account?",
      "subscribe": is_french ? "S'abonner" : "Subscribe"
    };

    return (
      <div style={styles.container}>
        <div style={styles.card}>
          <h1 style={styles.title}>{texts.welcome}</h1>
          <form onSubmit={handleSubmit} style={styles.form}>
            <div style={styles.inputGroup}>
              <label htmlFor="email" style={styles.label}>{texts.email}</label>
              <input id="email" type="email" value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                required placeholder={is_french ? "Entrez votre email" : "Enter your email"}
                style={styles.input} />
            </div>
            <div style={styles.inputGroup}>
              <div style={styles.passwordHeader}>
                <label htmlFor="password" style={styles.label}>{texts.password}</label>
                <button type="button" style={styles.linkButton}
                  onClick={() => window.location.href = "/forget-password.html"}>
                  {texts.forgot}
                </button>
              </div>
              <input id="password" type="password" value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                required placeholder={is_french ? "Entrez votre mot de passe" : "Enter your password"}
                style={styles.input} />
            </div>
            <button type="submit" disabled={isLoading} style={styles.submitButton}>
              {isLoading ? <div style={styles.spinner} /> : texts.signin}
            </button>
            <div style={styles.footer}>
              {texts.no_account} <button type="button" style={styles.linkButton}
                onClick={() => window.location.href = "/payment.html"}>{texts.subscribe}</button>
            </div>
          </form>
        </div>
      </div>
    );
  }

  const styles = {
    container: {
      height: "100vh", width: "100vw", display: "flex", alignItems: "center",
      justifyContent: "center", background: "white", fontFamily: "-apple-system, sans-serif",
      margin: 0, padding: 0, position: "fixed", top: 0, left: 0,
    },
    card: {
      width: "100%", maxWidth: "400px", margin: "20px", padding: "40px",
      borderRadius: "20px", backgroundColor: "rgba(255, 255, 255, 0.9)",
      boxShadow: "0 8px 32px 0 rgba(31, 38, 135, 0.37)", border: "1px solid rgba(255, 255, 255, 0.18)",
    },
    title: {
      margin: "0 0 24px 0", fontSize: "32px", fontWeight: "700", textAlign: "center",
      background: "linear-gradient(45deg, #FF6B6B, #4ECDC4)", WebkitBackgroundClip: "text",
      WebkitTextFillColor: "transparent",
    },
    input: {
      width: "100%", padding: "12px 16px", border: "2px solid #e1e1e1",
      borderRadius: "12px", fontSize: "16px", outline: "none", transition: "all 0.3s ease",
      backgroundColor: "rgba(255, 255, 255, 0.9)", marginBottom: "16px"
    },
    submitButton: {
      width: "100%", padding: "14px", backgroundColor: "#4ECDC4", color: "white",
      border: "none", borderRadius: "12px", fontSize: "16px", fontWeight: "600",
      cursor: "pointer", transition: "all 0.3s ease", marginTop: "8px"
    },
    spinner: {
      display: "inline-block", width: "20px", height: "20px",
      border: "3px solid rgba(255,255,255,0.3)", borderRadius: "50%",
      borderTopColor: "white", animation: "spin 1s ease-in-out infinite",
    },
    footer: { textAlign: "center", marginTop: "20px", fontSize: "14px", color: "#666" },
    linkButton: { 
      background: "none", 
      border: "none", 
      color: "#4ECDC4", 
      cursor: "pointer",
      fontSize: "14px",
      fontWeight: "600",
      padding: "0",
      textDecoration: "none",
      display: "inline"
    },
    passwordHeader: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      width: "100%"
    }
  };

  ReactDOM.render(<LoginForm />, document.getElementById('react-root'));
</script>

```